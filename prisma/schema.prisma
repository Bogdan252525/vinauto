generator client {
	provider = "prisma-client-js"
	binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
	provider = "postgresql"
	url = env("DATABASE_URL")
}

model User {
	id Int @id @default(autoincrement())

	firstName String
	lastName String
	email String @unique
	password String
	role UserRole @default(USER)
	verified DateTime

	provider String?
	providerId String?

	cart Cart?
	orders Order[]
	verificationCode VerificationCode?
	address Address[]
	reviews Review[]

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Category {
	id Int @id @default(autoincrement())
	name String @unique
	subCategories SubCategory[]

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model SubCategory {
  id Int @id @default(autoincrement())
  name String @unique
	image String?
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id Int @id @default(autoincrement())
  name String @unique
  models CarModel[]
  products Product[]
}

model CarModel {
  id Int @id @default(autoincrement())
  name String
  brand Brand? @relation(fields: [brandId], references: [id])
  brandId Int?
  products Product[]
}

model Product {
	id Int @id @default(autoincrement())

	name String
	description String?
	price Float @default(0.00)
	status ProductStatus? @default(AVAILABLE)
	stock Int? @default(0)
	isOnSale Boolean @default(false)
	discountPrice Int? @default(0)
	isFeatured  Boolean  @default(false)
	manufacturer String? @default("Невідомо")
  countryOfOrigin String? @default("Невідомо")
  averageRating Float @default(0)

  brands Brand[]
	carModels CarModel[]
	cartItems CartItem[]
	reviews Review[]
	images Image[]

	subCategory SubCategory @relation(fields: [subCategoryId], references: [id])
	subCategoryId Int

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	@@index([manufacturer])
  @@index([countryOfOrigin])
}

model Image {
	id Int @id @default(autoincrement())
	url String
	isPrimary Boolean @default(false)
	product Product? @relation(fields: [productId], references: [id])
	productId Int?
	createdAt DateTime @default(now())
}

model Cart {
	id Int @id @default(autoincrement())

	user User? @relation(fields: [userId], references: [id])
	userId Int? @unique

	items CartItem[]

	token String

	totalAmount Int @default(0)

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model CartItem {
	id Int @id @default(autoincrement())

	productItem Product @relation(fields: [productItemId], references: [id])
	productItemId Int

	cart Cart @relation(fields: [cartId], references: [id])
	cartId Int

	quantity Int @default(1)

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Order {
	id Int @id @default(autoincrement())

	user User? @relation(fields: [userId], references: [id])
	userId Int? @unique

	token String

	totalAmount Int
	status OrderStatus
	paymentId String?

	items Json

	fullName String
	email String
	phone String
	address String
	comment String?

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model VerificationCode {
	id Int @id @default(autoincrement())

	user User @relation(fields: [userId], references: [id])
	userId Int @unique

	code String @unique

	createdAt DateTime @default(now())

	@@unique([userId, code])
}

model AuditLog {
  id Int @id @default(autoincrement())
  entityType String
  entityId Int
  action String
  timestamp DateTime @default(now())
}

model Address {
	id Int @id @default(autoincrement())
	user User? @relation(fields: [userId], references: [id])
	userId Int?
	street String
	city String
	state String
	postalCode String
	country String
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Review {
	id Int @id @default(autoincrement())
	userId Int
	productId Int
	rating Int @default(0)
	comment String?
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	user User? @relation(fields: [userId], references: [id])
	product Product? @relation(fields: [productId], references: [id])

	@@unique([userId, productId])
}

enum OrderStatus {
	PENDING
	SUCCEEDED
	CANCELLED
}

enum UserRole {
	ADMIN
	USER
}

enum ProductStatus {
	AVAILABLE
	OUT_OF_STOCK
}
